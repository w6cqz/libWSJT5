This is not a make file ;)  But, it gives the information necessary
to compile wsjt.dll.  Currently building on Win 7 64 BUT using 32
bit MinGW 4.7.2 - I see zero advantange to building a 64 bit app for
this - yet.


V5
---

del *.o
gfortran -O2 -c avesp2.f blanker.f bzap.f db.f decode65.f deg2grid.f demod64a.f extract.f fil651.f fil652.f fil653.f flat1.f flat2.f flatten.f four2a.f ftpeak65.f gen65.f getpfx1.f getpfx2.f getsnr.f graycode.f grid2deg.f grid2k.f indexx.f interleave63.f k2grid.f limit.f nchar.f packcall.f packdxcc.f packgrid.f packmsg.f packtext.f pctile.f peakup.f pix2d.f ps.f set.f setup65.f short65.f slope.f smooth.f spec2d65.f symsync65.f sync65.f unpackcall.f unpackgrid.f unpackmsg.f unpacktext.f wsjt1.f wsjt65.f xcor.f xfft.f sort.f ssort.f chkhist.f version.f wisdom.f cqz65.f cqz4.f msync65.f sync24.f xcor24.f ps24.f decode24.f msync24.f genmet.f interleave24.f gen24.f entail.f morse.f gencwid.f g65.f strlen.f
gcc -O2 -c igray.c init_rs.c encode_rs.c decode_rs.c wrapkarn.c cutil.c ptt.c tab.c fano.c
gcc -shared -mrtd -o jt65.dll cutil.o wisdom.o nchar.o grid2deg.o packmsg.o packtext.o packcall.o packgrid.o unpackmsg.o unpacktext.o unpackcall.o unpackgrid.o deg2grid.o packdxcc.o getpfx1.o getpfx2.o k2grid.o grid2k.o interleave63.o graycode.o set.o igray.o init_rs.o encode_rs.o decode_rs.o setup65.o wrapkarn.o entail.o gen65.o gen24.o ps.o sort.o ssort.o pctile.o db.o flatten.o xfft.o four2a.o avesp2.o blanker.o bzap.o getsnr.o short65.o indexx.o chkhist.o demod64a.o peakup.o symsync65.o extract.o fil651.o fil652.o fil653.o ftpeak65.o spec2d65.o decode65.o decode24.o slope.o xcor.o flat1.o smooth.o limit.o sync65.o xcor24.o ps24.o sync24.o msync65.o msync24.o interleave24.o tab.o fano.o genmet.o morse.o gencwid.o wsjt65.o cqz65.o cqz4.o wsjt1.o version.o ptt.o flat2.o g65.o strlen.o \mingw\lib\gcc\mingw32\4.7.2\libgfortran.a libfftw3f.dll.a

---

This updates to latest fftw 3.3.3 and MinGW 4.7.2 - NOTE switch to GFortran on Windows - previously it was not workable, that was then ;)  Step one to multi-core testing of FFTW done.  And I'm already seeing a huge speed bump with update to 3.3.3 since it takes advantage of things my Intel i7 has that the older version didn't know about.

Question answered.  Using threaded FFT to parallel process the JT65 decode FFT is a bust.  If anything it's a touch slower than non-threaded.  But - I suspected it might be since it doesn't really fit the model for a process that would gain.  Good news is - it's still faster in non-threaded mode than older FFTW3 version.

---

WARNING - libwsjt V5 IS NOT compatible with old versions of JT65-HF so don't waste your time - it no longer contains routines JT65-HF 1.x depends upon - all possible routines that can be implemented more efficiently/easily outside this library have been removed.

-----
